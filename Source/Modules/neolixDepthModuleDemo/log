NeolixDepth.cpp:73:	LOGD("     - lib version: %d.%d.%d", pVer->major, pVer->minor, pVer->patch);
NeolixDepth.cpp:77:	LOGD("     - device number %d", deviceNumber);
ty_sdk/sample/SimpleView_Callback/main.cpp:22:    LOGD("=== Get frame %d", ++pData->index);
ty_sdk/sample/SimpleView_Callback/main.cpp:44:    LOGD("=== Callback: Re-enqueue buffer(%p, %d)", frame->userBuffer, frame->bufferSize);
ty_sdk/sample/SimpleView_Callback/main.cpp:50:    LOGD("=== Device Status Calllback: sys_reset %d, phy_reset %d", device_status->sysResetCounter, device_status->phyResetCounter);
ty_sdk/sample/SimpleView_Callback/main.cpp:70:    LOGD("=== Init lib");
ty_sdk/sample/SimpleView_Callback/main.cpp:74:    LOGD("     - lib version: %d.%d.%d", pVer->major, pVer->minor, pVer->patch);
ty_sdk/sample/SimpleView_Callback/main.cpp:77:        LOGD("=== Open device %s", IP);
ty_sdk/sample/SimpleView_Callback/main.cpp:81:            LOGD("=== Get device info");
ty_sdk/sample/SimpleView_Callback/main.cpp:84:            LOGD("     - device number %d", n);
ty_sdk/sample/SimpleView_Callback/main.cpp:90:                LOGD("=== No device got");
ty_sdk/sample/SimpleView_Callback/main.cpp:96:        LOGD("=== Open device: %s", ID);
ty_sdk/sample/SimpleView_Callback/main.cpp:103:        LOGD("=== Has RGB camera, open RGB cam");
ty_sdk/sample/SimpleView_Callback/main.cpp:107:    LOGD("=== Configure components, open depth cam");
ty_sdk/sample/SimpleView_Callback/main.cpp:113:    LOGD("=== Configure feature, set resolution to 640x480.");
ty_sdk/sample/SimpleView_Callback/main.cpp:114:    LOGD("Note: DM460 resolution feature is in component TY_COMPONENT_DEVICE,");
ty_sdk/sample/SimpleView_Callback/main.cpp:115:    LOGD("      other device may lays in some other components.");
ty_sdk/sample/SimpleView_Callback/main.cpp:119:    LOGD("=== Prepare image buffer");
ty_sdk/sample/SimpleView_Callback/main.cpp:122:    LOGD("     - Get size of framebuffer, %d", frameSize);
ty_sdk/sample/SimpleView_Callback/main.cpp:125:    LOGD("     - Allocate & enqueue buffers");
ty_sdk/sample/SimpleView_Callback/main.cpp:129:    LOGD("     - Enqueue buffer (%p, %d)", frameBuffer[0], frameSize);
ty_sdk/sample/SimpleView_Callback/main.cpp:131:    LOGD("     - Enqueue buffer (%p, %d)", frameBuffer[1], frameSize);
ty_sdk/sample/SimpleView_Callback/main.cpp:134:    LOGD("=== Register frame callback");
ty_sdk/sample/SimpleView_Callback/main.cpp:135:    LOGD("Note: Callback may block internal data receiving,");
ty_sdk/sample/SimpleView_Callback/main.cpp:136:    LOGD("      so that user should not do long time work in callback.");
ty_sdk/sample/SimpleView_Callback/main.cpp:137:    LOGD("      To avoid copying data, we pop the framebuffer from buffer queue and");
ty_sdk/sample/SimpleView_Callback/main.cpp:138:    LOGD("      give it back to user, user should call TYEnqueueBuffer to re-enqueue it.");
ty_sdk/sample/SimpleView_Callback/main.cpp:148:    LOGD("=== Register device status callback");
ty_sdk/sample/SimpleView_Callback/main.cpp:149:    LOGD("Note: Callback may block internal data receiving,");
ty_sdk/sample/SimpleView_Callback/main.cpp:150:    LOGD("      so that user should not do long time work in callback.");
ty_sdk/sample/SimpleView_Callback/main.cpp:153:    LOGD("=== Disable trigger mode");
ty_sdk/sample/SimpleView_Callback/main.cpp:156:    LOGD("=== Start capture");
ty_sdk/sample/SimpleView_Callback/main.cpp:159:    LOGD("=== Wait for callback");
ty_sdk/sample/SimpleView_Callback/main.cpp:208:                LOGD("Unmapped key %d", key);
ty_sdk/sample/SimpleView_Callback/main.cpp:218:    LOGD("=== Main done!");
ty_sdk/sample/DumpAllFeatures/main.cpp:12:        LOGD("===         %s: comp(0x%x) feat(0x%x) name(%s) access(%d) bindComponent(0x%x) bindFeature(0x%x)"
ty_sdk/sample/DumpAllFeatures/main.cpp:18:            LOGD("===         %14s: %d", "", n);
ty_sdk/sample/DumpAllFeatures/main.cpp:23:            LOGD("===         %14s: %f", "", v);
ty_sdk/sample/DumpAllFeatures/main.cpp:27:            LOGD("===         %14s: entry count %d", "", n);
ty_sdk/sample/DumpAllFeatures/main.cpp:32:                    LOGD("===         %14s:     value(%d), desc(%s)", "", pEntry[i].value, pEntry[i].description);
ty_sdk/sample/DumpAllFeatures/main.cpp:40:            LOGD("===         %14s: %d", "", v);
ty_sdk/sample/DumpAllFeatures/main.cpp:44:            LOGD("===         %14s: length(%d)", "", n);
ty_sdk/sample/DumpAllFeatures/main.cpp:46:            LOGD("===         %14s: content(%s)", "", buffer);
ty_sdk/sample/DumpAllFeatures/main.cpp:51:            LOGD("===         %14s: size(%d)", "", n);
ty_sdk/sample/DumpAllFeatures/main.cpp:54:            LOGD("===         %14s: size %d", "", n);
ty_sdk/sample/DumpAllFeatures/main.cpp:63:                    LOGD("===%23s%f %f %f", "", p->data[0], p->data[1], p->data[2]);
ty_sdk/sample/DumpAllFeatures/main.cpp:64:                    LOGD("===%23s%f %f %f", "", p->data[3], p->data[4], p->data[5]);
ty_sdk/sample/DumpAllFeatures/main.cpp:65:                    LOGD("===%23s%f %f %f", "", p->data[6], p->data[7], p->data[8]);
ty_sdk/sample/DumpAllFeatures/main.cpp:73:                    LOGD("===%23s%f %f %f %f", "", p->data[0], p->data[1], p->data[2], p->data[3]);
ty_sdk/sample/DumpAllFeatures/main.cpp:74:                    LOGD("===%23s%f %f %f %f", "", p->data[4], p->data[5], p->data[6], p->data[7]);
ty_sdk/sample/DumpAllFeatures/main.cpp:75:                    LOGD("===%23s%f %f %f %f", "", p->data[8], p->data[9], p->data[10], p->data[11]);
ty_sdk/sample/DumpAllFeatures/main.cpp:76:                    LOGD("===%23s%f %f %f %f", "", p->data[12], p->data[13], p->data[14], p->data[15]);
ty_sdk/sample/DumpAllFeatures/main.cpp:83:                    LOGD("===%23s%f %f %f %f", "", p->data[0], p->data[1], p->data[2], p->data[3]);
ty_sdk/sample/DumpAllFeatures/main.cpp:84:                    LOGD("===%23s%f %f %f %f", "", p->data[4], p->data[5], p->data[6], p->data[7]);
ty_sdk/sample/DumpAllFeatures/main.cpp:85:                    LOGD("===%23s%f %f %f %f", "", p->data[8], p->data[9], p->data[10], p->data[11]);
ty_sdk/sample/DumpAllFeatures/main.cpp:89:                    LOGD("===         %s: Unknown struct", name);
ty_sdk/sample/DumpAllFeatures/main.cpp:135:                                                    LOGD("===  %s:",#id);\
ty_sdk/sample/DumpAllFeatures/main.cpp:144:    LOGD("=== Dump all components and features:");
ty_sdk/sample/DumpAllFeatures/main.cpp:177:    LOGD("=== lib version: %d.%d.%d", pVer->major, pVer->minor, pVer->patch);
ty_sdk/sample/DumpAllFeatures/main.cpp:181:        LOGD("=== Open device %s", IP);
ty_sdk/sample/DumpAllFeatures/main.cpp:185:        LOGD("===   device %s:", IP);
ty_sdk/sample/DumpAllFeatures/main.cpp:186:        LOGD("===       interface  : %d", pBaseInfo[0].devInterface);
ty_sdk/sample/DumpAllFeatures/main.cpp:187:        LOGD("===       id         : %s", pBaseInfo[0].id);
ty_sdk/sample/DumpAllFeatures/main.cpp:188:        LOGD("===       vendor     : %s", pBaseInfo[0].vendorName);
ty_sdk/sample/DumpAllFeatures/main.cpp:189:        LOGD("===       model      : %s", pBaseInfo[0].modelName);
ty_sdk/sample/DumpAllFeatures/main.cpp:190:        LOGD("===       HW version : %d.%d.%d"
ty_sdk/sample/DumpAllFeatures/main.cpp:195:        LOGD("===       FW version : %d.%d.%d"
ty_sdk/sample/DumpAllFeatures/main.cpp:205:            LOGD("=== device number %d", n);
ty_sdk/sample/DumpAllFeatures/main.cpp:210:                LOGD("=== No device got");
ty_sdk/sample/DumpAllFeatures/main.cpp:216:        LOGD("=== get device list %d:", n);
ty_sdk/sample/DumpAllFeatures/main.cpp:218:            LOGD("===   device %d:", i);
ty_sdk/sample/DumpAllFeatures/main.cpp:219:            LOGD("===       interface  : %d", pBaseInfo[i].devInterface);
ty_sdk/sample/DumpAllFeatures/main.cpp:220:            LOGD("===       id         : %s", pBaseInfo[i].id);
ty_sdk/sample/DumpAllFeatures/main.cpp:221:            LOGD("===       vendor     : %s", pBaseInfo[i].vendorName);
ty_sdk/sample/DumpAllFeatures/main.cpp:222:            LOGD("===       model      : %s", pBaseInfo[i].modelName);
ty_sdk/sample/DumpAllFeatures/main.cpp:223:            LOGD("===       HW version : %d.%d.%d"
ty_sdk/sample/DumpAllFeatures/main.cpp:228:            LOGD("===       FW version : %d.%d.%d"
ty_sdk/sample/DumpAllFeatures/main.cpp:235:        LOGD("=== Open device: %s", ID);
ty_sdk/sample/SimpleView_FetchFrame/main.cpp:52:    LOGD("=== Get frame %d", ++pData->index);
ty_sdk/sample/SimpleView_FetchFrame/main.cpp:76:        LOGD("Unmapped key %d", key);
ty_sdk/sample/SimpleView_FetchFrame/main.cpp:79:    LOGD("=== Callback: Re-enqueue buffer(%p, %d)", frame->userBuffer, frame->bufferSize);
ty_sdk/sample/SimpleView_FetchFrame/main.cpp:96:    LOGD("=== Init lib");
ty_sdk/sample/SimpleView_FetchFrame/main.cpp:100:    LOGD("     - lib version: %d.%d.%d", pVer->major, pVer->minor, pVer->patch);
ty_sdk/sample/SimpleView_FetchFrame/main.cpp:103:        LOGD("=== Open device %s", IP);
ty_sdk/sample/SimpleView_FetchFrame/main.cpp:106:        LOGD("=== Get device info");
ty_sdk/sample/SimpleView_FetchFrame/main.cpp:108:        LOGD("     - device number %d", n);
ty_sdk/sample/SimpleView_FetchFrame/main.cpp:114:            LOGD("=== No device got");
ty_sdk/sample/SimpleView_FetchFrame/main.cpp:118:        LOGD("=== Open device 0");
ty_sdk/sample/SimpleView_FetchFrame/main.cpp:126:        LOGD("=== Has RGB camera, open RGB cam");
ty_sdk/sample/SimpleView_FetchFrame/main.cpp:130:    LOGD("=== Configure components, open depth cam");
ty_sdk/sample/SimpleView_FetchFrame/main.cpp:135:    LOGD("=== Configure feature, set resolution to 640x480.");
ty_sdk/sample/SimpleView_FetchFrame/main.cpp:136:    LOGD("Note: DM460 resolution feature is in component TY_COMPONENT_DEVICE,");
ty_sdk/sample/SimpleView_FetchFrame/main.cpp:137:    LOGD("      other device may lays in some other components.");
ty_sdk/sample/SimpleView_FetchFrame/main.cpp:145:    LOGD("=== Prepare image buffer");
ty_sdk/sample/SimpleView_FetchFrame/main.cpp:148:    LOGD("     - Get size of framebuffer, %d", frameSize);
ty_sdk/sample/SimpleView_FetchFrame/main.cpp:151:    LOGD("     - Allocate & enqueue buffers");
ty_sdk/sample/SimpleView_FetchFrame/main.cpp:155:    LOGD("     - Enqueue buffer (%p, %d)", frameBuffer[0], frameSize);
ty_sdk/sample/SimpleView_FetchFrame/main.cpp:157:    LOGD("     - Enqueue buffer (%p, %d)", frameBuffer[1], frameSize);
ty_sdk/sample/SimpleView_FetchFrame/main.cpp:160:    LOGD("=== Register callback");
ty_sdk/sample/SimpleView_FetchFrame/main.cpp:161:    LOGD("Note: Callback may block internal data receiving,");
ty_sdk/sample/SimpleView_FetchFrame/main.cpp:162:    LOGD("      so that user should not do long time work in callback.");
ty_sdk/sample/SimpleView_FetchFrame/main.cpp:163:    LOGD("      To avoid copying data, we pop the framebuffer from buffer queue and");
ty_sdk/sample/SimpleView_FetchFrame/main.cpp:164:    LOGD("      give it back to user, user should call TYEnqueueBuffer to re-enqueue it.");
ty_sdk/sample/SimpleView_FetchFrame/main.cpp:172:    LOGD("=== Disable trigger mode");
ty_sdk/sample/SimpleView_FetchFrame/main.cpp:178:    LOGD("=== Start capture");
ty_sdk/sample/SimpleView_FetchFrame/main.cpp:181:    LOGD("=== While loop to fetch frame");
ty_sdk/sample/SimpleView_FetchFrame/main.cpp:188:            LOGD("... Drop one frame");
ty_sdk/sample/SimpleView_FetchFrame/main.cpp:201:    LOGD("=== Main done!");
ty_sdk/sample/SimpleView_TriggerMode/main.cpp:19:    LOGD("=== Get frame %d", ++pData->index);
ty_sdk/sample/SimpleView_TriggerMode/main.cpp:31:    LOGD("=== Callback: Re-enqueue buffer(%p, %d)", frame->userBuffer, frame->bufferSize);
ty_sdk/sample/SimpleView_TriggerMode/main.cpp:52:    LOGD("=== Init lib");
ty_sdk/sample/SimpleView_TriggerMode/main.cpp:56:    LOGD("     - lib version: %d.%d.%d", pVer->major, pVer->minor, pVer->patch);
ty_sdk/sample/SimpleView_TriggerMode/main.cpp:59:        LOGD("=== Open device %s", IP);
ty_sdk/sample/SimpleView_TriggerMode/main.cpp:62:        LOGD("=== Get device info");
ty_sdk/sample/SimpleView_TriggerMode/main.cpp:64:        LOGD("     - device number %d", n);
ty_sdk/sample/SimpleView_TriggerMode/main.cpp:70:            LOGD("=== No device got");
ty_sdk/sample/SimpleView_TriggerMode/main.cpp:74:        LOGD("=== Open device 0");
ty_sdk/sample/SimpleView_TriggerMode/main.cpp:81:        // LOGD("=== Has RGB camera, open RGB cam");
ty_sdk/sample/SimpleView_TriggerMode/main.cpp:85:    LOGD("=== Configure components, open depth cam");
ty_sdk/sample/SimpleView_TriggerMode/main.cpp:89:    LOGD("=== Configure feature, set resolution to 640x480.");
ty_sdk/sample/SimpleView_TriggerMode/main.cpp:90:    LOGD("Note: DM460 resolution feature is in component TY_COMPONENT_DEVICE,");
ty_sdk/sample/SimpleView_TriggerMode/main.cpp:91:    LOGD("      other device may lays in some other components.");
ty_sdk/sample/SimpleView_TriggerMode/main.cpp:95:    LOGD("=== Prepare image buffer");
ty_sdk/sample/SimpleView_TriggerMode/main.cpp:98:    LOGD("     - Get size of framebuffer, %d", frameSize);
ty_sdk/sample/SimpleView_TriggerMode/main.cpp:101:    LOGD("     - Allocate & enqueue buffers");
ty_sdk/sample/SimpleView_TriggerMode/main.cpp:105:    LOGD("     - Enqueue buffer (%p, %d)", frameBuffer[0], frameSize);
ty_sdk/sample/SimpleView_TriggerMode/main.cpp:107:    LOGD("     - Enqueue buffer (%p, %d)", frameBuffer[1], frameSize);
ty_sdk/sample/SimpleView_TriggerMode/main.cpp:110:    LOGD("=== Register callback");
ty_sdk/sample/SimpleView_TriggerMode/main.cpp:111:    LOGD("Note: Callback may block internal data receiving,");
ty_sdk/sample/SimpleView_TriggerMode/main.cpp:112:    LOGD("      so that user should not do long time work in callback.");
ty_sdk/sample/SimpleView_TriggerMode/main.cpp:113:    LOGD("      To avoid copying data, we pop the framebuffer from buffer queue and");
ty_sdk/sample/SimpleView_TriggerMode/main.cpp:114:    LOGD("      give it back to user, user should call TYEnqueueBuffer to re-enqueue it.");
ty_sdk/sample/SimpleView_TriggerMode/main.cpp:122:    LOGD("=== Enable trigger mode");
ty_sdk/sample/SimpleView_TriggerMode/main.cpp:125:    LOGD("=== Enable left ir undistort");
ty_sdk/sample/SimpleView_TriggerMode/main.cpp:128:    LOGD("=== Start capture");
ty_sdk/sample/SimpleView_TriggerMode/main.cpp:131:    LOGD("=== Loop for send trigger signal");
ty_sdk/sample/SimpleView_TriggerMode/main.cpp:136:            LOGD("--- press any key to trigger:");
ty_sdk/sample/SimpleView_TriggerMode/main.cpp:144:                LOGD("... Drop one frame");
ty_sdk/sample/SimpleView_TriggerMode/main.cpp:160:                LOGD("Pressed key %d", key);
ty_sdk/sample/SimpleView_TriggerMode/main.cpp:170:    LOGD("=== Main done!");
ty_sdk/sample/SimpleView_Registration/main.cpp:20:    LOGD("=== Get frame %d", ++pData->index);
ty_sdk/sample/SimpleView_Registration/main.cpp:75:        LOGD(">>>>>>>>>> write images");
ty_sdk/sample/SimpleView_Registration/main.cpp:92:            LOGD("Pressed key %d", key);
ty_sdk/sample/SimpleView_Registration/main.cpp:95:    LOGD("=== Callback: Re-enqueue buffer(%p, %d)", frame->userBuffer, frame->bufferSize);
ty_sdk/sample/SimpleView_Registration/main.cpp:116:    LOGD("=== Init lib");
ty_sdk/sample/SimpleView_Registration/main.cpp:120:    LOGD("     - lib version: %d.%d.%d", pVer->major, pVer->minor, pVer->patch);
ty_sdk/sample/SimpleView_Registration/main.cpp:123:        LOGD("=== Open device %s", IP);
ty_sdk/sample/SimpleView_Registration/main.cpp:127:            LOGD("=== Get device info");
ty_sdk/sample/SimpleView_Registration/main.cpp:129:            LOGD("     - device number %d", n);
ty_sdk/sample/SimpleView_Registration/main.cpp:135:                LOGD("=== No device got");
ty_sdk/sample/SimpleView_Registration/main.cpp:141:        LOGD("=== Open device: %s", ID);
ty_sdk/sample/SimpleView_Registration/main.cpp:152:    LOGD("=== Configure components");
ty_sdk/sample/SimpleView_Registration/main.cpp:156:    LOGD("=== Prepare image buffer");
ty_sdk/sample/SimpleView_Registration/main.cpp:161:    LOGD("     - Get size of framebuffer, %d", frameSize);
ty_sdk/sample/SimpleView_Registration/main.cpp:162:    LOGD("     - Allocate & enqueue buffers");
ty_sdk/sample/SimpleView_Registration/main.cpp:166:    LOGD("     - Enqueue buffer (%p, %d)", frameBuffer[0], frameSize);
ty_sdk/sample/SimpleView_Registration/main.cpp:168:    LOGD("     - Enqueue buffer (%p, %d)", frameBuffer[1], frameSize);
ty_sdk/sample/SimpleView_Registration/main.cpp:171:    LOGD("=== Register callback");
ty_sdk/sample/SimpleView_Registration/main.cpp:172:    LOGD("Note: Callback may block internal data receiving,");
ty_sdk/sample/SimpleView_Registration/main.cpp:173:    LOGD("      so that user should not do long time work in callback.");
ty_sdk/sample/SimpleView_Registration/main.cpp:174:    LOGD("      To avoid copying data, we pop the framebuffer from buffer queue and");
ty_sdk/sample/SimpleView_Registration/main.cpp:175:    LOGD("      give it back to user, user should call TYEnqueueBuffer to re-enqueue it.");
ty_sdk/sample/SimpleView_Registration/main.cpp:183:    LOGD("=== Disable trigger mode");
ty_sdk/sample/SimpleView_Registration/main.cpp:186:    LOGD("=== Start capture");
ty_sdk/sample/SimpleView_Registration/main.cpp:189:    LOGD("=== Read color rectify matrix");
ty_sdk/sample/SimpleView_Registration/main.cpp:211:    LOGD("=== Wait for callback");
ty_sdk/sample/SimpleView_Registration/main.cpp:230:    LOGD("=== Main done!");
ty_sdk/sample/SimpleView_Point3D/main.cpp:39:    LOGD("=== Get frame %d", ++pData->index);
ty_sdk/sample/SimpleView_Point3D/main.cpp:77:            LOGD("Pressed key %d", key);
ty_sdk/sample/SimpleView_Point3D/main.cpp:80:    LOGD("=== Callback: Re-enqueue buffer(%p, %d)", frame->userBuffer, frame->bufferSize);
ty_sdk/sample/SimpleView_Point3D/main.cpp:102:    LOGD("=== Init lib");
ty_sdk/sample/SimpleView_Point3D/main.cpp:106:    LOGD("     - lib version: %d.%d.%d", pVer->major, pVer->minor, pVer->patch);
ty_sdk/sample/SimpleView_Point3D/main.cpp:109:        LOGD("=== Open device %s", IP);
ty_sdk/sample/SimpleView_Point3D/main.cpp:112:        LOGD("=== Open device %s", ID);
ty_sdk/sample/SimpleView_Point3D/main.cpp:115:        LOGD("=== Get device info");
ty_sdk/sample/SimpleView_Point3D/main.cpp:117:        LOGD("     - device number %d", n);
ty_sdk/sample/SimpleView_Point3D/main.cpp:123:            LOGD("=== No device got");
ty_sdk/sample/SimpleView_Point3D/main.cpp:127:        LOGD("=== Open device 0");
ty_sdk/sample/SimpleView_Point3D/main.cpp:131:    LOGD("=== Configure components, open point3d cam");
ty_sdk/sample/SimpleView_Point3D/main.cpp:147:    LOGD("=== Configure feature, set resolution to 640x480.");
ty_sdk/sample/SimpleView_Point3D/main.cpp:148:    LOGD("Note: DM460 resolution feature is in component TY_COMPONENT_DEVICE,");
ty_sdk/sample/SimpleView_Point3D/main.cpp:149:    LOGD("      other device may lays in some other components.");
ty_sdk/sample/SimpleView_Point3D/main.cpp:153:    LOGD("=== Prepare image buffer");
ty_sdk/sample/SimpleView_Point3D/main.cpp:156:    LOGD("     - Get size of framebuffer, %d", frameSize);
ty_sdk/sample/SimpleView_Point3D/main.cpp:159:    LOGD("     - Allocate & enqueue buffers");
ty_sdk/sample/SimpleView_Point3D/main.cpp:163:    LOGD("     - Enqueue buffer (%p, %d)", frameBuffer[0], frameSize);
ty_sdk/sample/SimpleView_Point3D/main.cpp:165:    LOGD("     - Enqueue buffer (%p, %d)", frameBuffer[1], frameSize);
ty_sdk/sample/SimpleView_Point3D/main.cpp:168:    LOGD("=== Register callback");
ty_sdk/sample/SimpleView_Point3D/main.cpp:169:    LOGD("Note: Callback may block internal data receiving,");
ty_sdk/sample/SimpleView_Point3D/main.cpp:170:    LOGD("      so that user should not do long time work in callback.");
ty_sdk/sample/SimpleView_Point3D/main.cpp:171:    LOGD("      To avoid copying data, we pop the framebuffer from buffer queue and");
ty_sdk/sample/SimpleView_Point3D/main.cpp:172:    LOGD("      give it back to user, user should call TYEnqueueBuffer to re-enqueue it.");
ty_sdk/sample/SimpleView_Point3D/main.cpp:184:    LOGD("=== Disable trigger mode");
ty_sdk/sample/SimpleView_Point3D/main.cpp:187:    LOGD("=== Start capture");
ty_sdk/sample/SimpleView_Point3D/main.cpp:190:    LOGD("=== While loop to fetch frame");
ty_sdk/sample/SimpleView_Point3D/main.cpp:197:            LOGD("... Drop one frame");
ty_sdk/sample/SimpleView_Point3D/main.cpp:211:    LOGD("=== Main done!");
ty_sdk/sample/SimpleView_MultiDevice/main.cpp:46:    LOGD("=== Callback: Re-enqueue buffer(%p, %d)", frame->userBuffer, frame->bufferSize);
ty_sdk/sample/SimpleView_MultiDevice/main.cpp:52:    LOGD("=== Init lib");
ty_sdk/sample/SimpleView_MultiDevice/main.cpp:56:    LOGD("     - lib version: %d.%d.%d", pVer->major, pVer->minor, pVer->patch);
ty_sdk/sample/SimpleView_MultiDevice/main.cpp:58:    LOGD("=== Get device info");
ty_sdk/sample/SimpleView_MultiDevice/main.cpp:61:    LOGD("     - device number %d", n);
ty_sdk/sample/SimpleView_MultiDevice/main.cpp:67:        LOGD("=== Need more than 1 devices");
ty_sdk/sample/SimpleView_MultiDevice/main.cpp:73:        LOGD("=== Open device %d (id: %s)", i, pBaseInfo[i].id);
ty_sdk/sample/SimpleView_MultiDevice/main.cpp:81:            LOGD("=== Has RGB camera, open RGB cam");
ty_sdk/sample/SimpleView_MultiDevice/main.cpp:85:        LOGD("=== Configure components, open depth cam");
ty_sdk/sample/SimpleView_MultiDevice/main.cpp:89:        LOGD("=== Configure feature, set resolution to 640x480.");
ty_sdk/sample/SimpleView_MultiDevice/main.cpp:93:        LOGD("=== Prepare image buffer");
ty_sdk/sample/SimpleView_MultiDevice/main.cpp:96:        LOGD("     - Get size of framebuffer, %d", frameSize);
ty_sdk/sample/SimpleView_MultiDevice/main.cpp:99:        LOGD("     - Allocate & enqueue buffers");
ty_sdk/sample/SimpleView_MultiDevice/main.cpp:102:        LOGD("     - Enqueue buffer (%p, %d)", cams[i].fb[0], frameSize);
ty_sdk/sample/SimpleView_MultiDevice/main.cpp:104:        LOGD("     - Enqueue buffer (%p, %d)", cams[i].fb[1], frameSize);
ty_sdk/sample/SimpleView_MultiDevice/main.cpp:109:        LOGD("=== Set trigger mode %d", triggerMode);
ty_sdk/sample/SimpleView_MultiDevice/main.cpp:112:        LOGD("=== Start capture");
ty_sdk/sample/SimpleView_MultiDevice/main.cpp:116:    LOGD("=== While loop to fetch frame");
ty_sdk/sample/SimpleView_MultiDevice/main.cpp:123:                LOGD("cam %s %d ... Drop one frame", cams[i].sn, cams[i].idx);
ty_sdk/sample/SimpleView_MultiDevice/main.cpp:138:                LOGD("Unmapped key %d", key);
ty_sdk/sample/SimpleView_MultiDevice/main.cpp:152:    LOGD("=== Main done!");
ty_sdk/sample/common/common.hpp:59:#define LOGD(fmt,...)  printf("%d " fmt "\n", getSystemTime(), ##__VA_ARGS__)
ty_sdk/sample/DepthToWorld/main.cpp:18:    LOGD("=== Get frame %d", ++pData->index);
ty_sdk/sample/DepthToWorld/main.cpp:58:            LOGD("Pressed key %d", key);
ty_sdk/sample/DepthToWorld/main.cpp:61:    LOGD("=== Callback: Re-enqueue buffer(%p, %d)", frame->userBuffer, frame->bufferSize);
ty_sdk/sample/DepthToWorld/main.cpp:67:    LOGD("=== Init lib");
ty_sdk/sample/DepthToWorld/main.cpp:71:    LOGD("     - lib version: %d.%d.%d", pVer->major, pVer->minor, pVer->patch);
ty_sdk/sample/DepthToWorld/main.cpp:73:    LOGD("=== Get device info");
ty_sdk/sample/DepthToWorld/main.cpp:75:    LOGD("     - device number %d", n);
ty_sdk/sample/DepthToWorld/main.cpp:81:        LOGD("=== No device got");
ty_sdk/sample/DepthToWorld/main.cpp:85:    LOGD("=== Open device 0");
ty_sdk/sample/DepthToWorld/main.cpp:89:    LOGD("=== Configure components, open depth cam");
ty_sdk/sample/DepthToWorld/main.cpp:93:    LOGD("=== Configure feature, set resolution to 640x480.");
ty_sdk/sample/DepthToWorld/main.cpp:94:    LOGD("Note: DM460 resolution feature is in component TY_COMPONENT_DEVICE,");
ty_sdk/sample/DepthToWorld/main.cpp:95:    LOGD("      other device may lays in some other components.");
ty_sdk/sample/DepthToWorld/main.cpp:99:    LOGD("=== Prepare image buffer");
ty_sdk/sample/DepthToWorld/main.cpp:102:    LOGD("     - Get size of framebuffer, %d", frameSize);
ty_sdk/sample/DepthToWorld/main.cpp:105:    LOGD("     - Allocate & enqueue buffers");
ty_sdk/sample/DepthToWorld/main.cpp:109:    LOGD("     - Enqueue buffer (%p, %d)", frameBuffer[0], frameSize);
ty_sdk/sample/DepthToWorld/main.cpp:111:    LOGD("     - Enqueue buffer (%p, %d)", frameBuffer[1], frameSize);
ty_sdk/sample/DepthToWorld/main.cpp:114:    LOGD("=== Register callback");
ty_sdk/sample/DepthToWorld/main.cpp:115:    LOGD("Note: Callback may block internal data receiving,");
ty_sdk/sample/DepthToWorld/main.cpp:116:    LOGD("      so that user should not do long time work in callback.");
ty_sdk/sample/DepthToWorld/main.cpp:117:    LOGD("      To avoid copying data, we pop the framebuffer from buffer queue and");
ty_sdk/sample/DepthToWorld/main.cpp:118:    LOGD("      give it back to user, user should call TYEnqueueBuffer to re-enqueue it.");
ty_sdk/sample/DepthToWorld/main.cpp:128:    LOGD("=== Disable trigger mode");
ty_sdk/sample/DepthToWorld/main.cpp:131:    LOGD("=== Start capture");
ty_sdk/sample/DepthToWorld/main.cpp:134:    LOGD("=== While loop to fetch frame");
ty_sdk/sample/DepthToWorld/main.cpp:141:            LOGD("... Drop one frame");
ty_sdk/sample/DepthToWorld/main.cpp:155:    LOGD("=== Main done!");
